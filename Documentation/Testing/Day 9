# ðŸ§ª Day 8 â€” Testing Log

## Features to Test

  - Backend: Save & fetch outfits (`/api/outfits/save`, `/api/outfits/recent`)
  - Frontend: Save outfit after upload, RecentOutfits display with OutfitCard
  - Persistence: Verify `outfits.json` updated and data survives refresh

-----

## Step 1 â€” Start Backend & Frontend

```bash
# Backend
cd backend
venv\Scripts\activate
flask run

# Frontend
cd frontend
npm run dev

# URLs
Backend: http://127.0.0.1:5000
Frontend: http://localhost:5173
```

-----

## Step 2 â€” Backend API Testing

### **Save Outfit (Success Case - Required Keys)**

1.  Open Postman.

2.  Create a new **POST** request.

3.  Set the request URL to: `http://127.0.0.1:5000/api/outfits/save`

4.  Go to the **Headers** tab and set:

      - Key: `Content-Type`
      - Value: `application/json`

5.  Go to the **Body** tab, select **raw**, and choose **JSON** from the dropdown.

6.  Paste the following **CORRECTED** JSON body (using `image_url` and `colours`):

    ```json
    {
      "image_url": "http://example.com/outfit.jpg",
      "colours": ["#1A1A1A", "#FFFFFF", "#D4AF37"],
      "theme": "Autumn"
    }
    ```

7.  Click **Send**.

8.  **âœ… Verify:**

      - The HTTP status code is **`201 Created`** (or `200 OK`).
      - The response body is similar to:
        ```json
        {
          "message": "Outfit saved",
          "entry": {
            "timestamp": "...",
            "image_url": "http://example.com/outfit.jpg",
            "colours": ["#1A1A1A", "#FFFFFF", "#D4AF37"],
            "theme": "Autumn"
          }
        }
        ```

-----

### **Fetch Recent Outfits**

1.  Create a new **GET** request in Postman.
2.  Set the request URL to: `http://127.0.0.1:5000/api/outfits/recent?limit=2`
3.  Click **Send**.
4.  **âœ… Verify:**
      - The HTTP status code is **`200 OK`**.
      - The response body contains a list of outfits (`"outfits"` array), including the one saved in the previous step.

-----

### **Save Outfit (Edge Case â€” Missing Fields)**

1.  Use the **POST** request created in the Save Outfit section.

2.  Update the **Body** (raw, JSON) to only include a single field:

    ```json
    {
      "colours": ["#FFFFFF"]
    }
    ```

3.  Click **Send**.

4.  **âœ… Verify:**

      - The HTTP status code is **`400 Bad Request`**.
      - The response body contains the error message, exactly or similar to:
        ```json
        { "error": "Missing image_url or colours fields" }
        ```

-----

## Step 3 â€” Frontend Testing (UI)

### **Upload Outfit**

1.  Visit `http://localhost:5173`
2.  Select a **.jpg** or **.png** file and click **Upload**.
3.  **âœ… Verify:**
      - Loading indicator shows briefly.
      - **Palette swatches** with hex values appear.
      - The new outfit appears instantly in the **Recent Outfits** section below.
      - Verify that the `backend/data/outfits.json` file has been updated with a new entry.

### **Recent Outfits**

1.  **Refresh** the webpage (`http://localhost:5173`).
2.  **âœ… Verify:**
      - The **OutfitCard** for the recently uploaded image still shows the image, theme, and swatches, confirming persistence.

### **Error Handling**

  - Attempt to upload a **.txt** or another invalid file type.
  - **âœ… Verify:** A user-friendly error message appears on the screen, and the application does not crash.

### **Persistence**

  - Upload two more outfits, then refresh the page.
  - **âœ… Verify:** All three recently uploaded outfits are still visible and displayed correctly by the **RecentOutfits** component.